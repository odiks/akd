filebeat.inputs:
  - type: httpjson
    enabled: true
    config_version: 2
    interval: 1m  # Fréquence des requêtes
    url: "https://<your-bitwarden-domain>/api/events"
    request.method: GET
    request.headers:
      Accept: "application/json"
      Authorization: "Bearer <your-access-token>"  # Remplacez par votre jeton d'accès admin
    ssl:
      verification_mode: full  # Vérifiez le certificat SSL
      certificate_authorities:
        - /path/to/ca.crt  # Chemin vers le certificat CA si nécessaire
    response.split:
      target: body.events  # Adaptez selon le format des logs renvoyés
      type: array
    response.save_headers: true  # Facultatif : inclure les en-têtes dans les logs

filebeat.inputs:
  - type: httpjson
    config_version: 2
    enabled: true
    interval: 1m
    request.method: GET
    request.url: "https://<your-api-endpoint>/admin/events"
    request.headers:
      Authorization: "Bearer <your-token>"
    request.params:
      limit: 100  # Limits the number of events per request
    response.split:
      target: ""
      type: array
    state:
      # Set a stateful cursor to track which events have been processed
      cursor:
        value: '[].timestamp'  # Use a unique field like timestamp, ID, etc.
        key: 'last_processed_timestamp'

    # Ensure each event includes a unique field
    response.transforms:
      - set:
          target: "@metadata._id"
          value: '[[.id]]'  # Use a unique field from the JSON response, such as 'id'



filter {
    grok {
        pattern_definitions => {
            "SSH_EVENT" "%{DATA:ssh_event}"
            "AUTH_METHOD" "%{DATA:auth_method}"
            "IP_PORT" "%{IPORHOST:ip} port %{NUMBER:port:long}"
            "USER_INFO" "user %{USERNAME:user}(?:\\(uid=%{NUMBER:uid}\\))?"
            "PAM_SESSION" "%{WORD:pam_module}\\(%{DATA:pam_service}\\): session %{WORD:session_status} for %{USER_INFO}"
            "GROUP_ACTION" "(user|(shadow\\s)?group)"
            "ACTION" "(connection|Connection) (to|from)|closed by"
        }
        match => { "message" => 
        [
            # SSH authentication events
            "^%{SSH_EVENT} %{AUTH_METHOD} for (invalid user)?%{DATA:user} from %{IP_PORT} ssh2(: %{GREEDYDATA:ssh_signature})?",

            # Sudo actions
            "^%{DATA:user} :( %{DATA:sudo_error} ;)? TTY=%{DATA:sudo_tty} ; PWD=%{DATA:sudo_pwd} ; USER=%{DATA:sudo_user} ; COMMAND=%{GREEDYDATA:sudo_command}",

            # PAM sessions
            "%{PAM_SESSION} by %{USER_INFO}",
            
            # Connection messages
            "(?:%{WORD:action}\\s)?(%{ACTION}) %{IP_PORT}( on %{IP_PORT})?( rdomain %{DATA:rdomain})?",

            # New user creation
            "^new user: name=%{DATA:user}, UID=%{NUMBER:user_id}, GID=%{NUMBER:group_id}, home=%{DATA:useradd_home}, shell=%{DATA:useradd_shell}",

            # Group or shadow group modifications
            "(^%{WORD:action}) %{GROUP_ACTION} '%{USERNAME:user_groupname}'(?: owned by '%{USERNAME:owned_username}')?",

            # PAM authentication events
            "%{WORD:auth_module}\\(%{DATA:auth_service}\\): authentication %{WORD:auth_status}; %{GREEDYDATA:auth_remaining_message}",

            # SSH specific user events
            "^%{SSH_EVENT} user %{DATA:user} from %{IPORHOST:source_ip}",

            # Group addition
            "^group added to %{PATH:file_path}: name=%{WORD:group_name}(, GID=%{NUMBER:group_gid})?",

            # Dropped identification string
            "^Did not receive identification string from %{IPORHOST:ssh_dropped_ip}",

            # Group removal
            "^group '%{USERNAME:group_name}' removed(?: from %{PATH:file_path})?",

            # New group creation
            "^new group: name=%{DATA:group_name}, GID=%{NUMBER:group_id}"
        ]
        }
    }
}





filter {
    grok {
        pattern_definitions => {
            "SSH_EVENT" "%{DATA:ssh_event}"
            "USER_ID" "%{USERNAME:user}(?:\\(uid=%{NUMBER:uid}\\))?"
            "IP_PORT" "%{IPORHOST:ip} port %{NUMBER:port:long}"
            "PAM_EVENT" "%{WORD:pam_module}\\(%{DATA:pam_service}\\): session %{WORD:session_status} for %{USER_ID}( by %{USER_ID})?"
            "AUTH_EVENT" "%{WORD:auth_module}\\(%{DATA:auth_service}\\): authentication %{WORD:auth_status}; %{GREEDYDATA:auth_msg}"
            "CONNECTION_ACTION" "(connection|Connection) (to|from)|closed by"
            "GROUP_ACTION" "(user|(?:shadow\\s)?group)"
        }
        match => { "message" => 
        [
            # SSH authentication events
            "^%{SSH_EVENT} %{DATA:auth_method} for (invalid user)?%{DATA:user} from %{IP_PORT} ssh2(: %{GREEDYDATA:ssh_signature})?",
            
            # Sudo commands
            "^%{DATA:user} :( %{DATA:sudo_error} ;)? TTY=%{DATA:sudo_tty} ; PWD=%{DATA:sudo_pwd} ; USER=%{DATA:sudo_user} ; COMMAND=%{GREEDYDATA:sudo_command}",

            # PAM sessions
            "%{PAM_EVENT}",

            # Connection messages
            "(?:%{WORD:action}\\s)?(%{CONNECTION_ACTION}) %{IP_PORT}( on %{IP_PORT})?( rdomain %{DATA:rdomain})?",

            # User creation
            "^new user: name=%{DATA:user}, UID=%{NUMBER:user_id}, GID=%{NUMBER:group_id}, home=%{DATA:user_home}, shell=%{DATA:user_shell}",

            # Group changes
            "(^%{WORD:action}) %{GROUP_ACTION} '%{USERNAME:groupname}'(?: owned by '%{USERNAME:owner}')?",

            # Authentication event
            "%{AUTH_EVENT}",

            # SSH specific events
            "^%{SSH_EVENT} user %{DATA:user} from %{IPORHOST:source_ip}",

            # Group addition
            "^group added to %{PATH:path}: name=%{WORD:group_name}(, GID=%{NUMBER:group_gid})?",

            # Missing identification string
            "^Did not receive identification string from %{IPORHOST:ssh_dropped_ip}",

            # Group removal
            "^group '%{USERNAME:group_name}' removed(?: from %{PATH:path})?",

            # New group creation
            "^new group: name=%{DATA:group_name}, GID=%{NUMBER:group_id}"
        ]
        }
    }
}

%{WORD:event} (from|to)? %{IPV4:ip_address}( port %{NUMBER:port})?( on %{IPV4:destination_ip} port %{NUMBER:destination_port})?( rdomain "%{DATA:rdomain}")?
%{IP:src_ip} port %{NUMBER:src_port}( on %{IP:dest_ip} port %{NUMBER:dest_port})?( rdomain %{DATA:rdomain})?

# Connection messages
            "(?:%{WORD:action}\\s)?((connection|Connection) (to|from)|closed by) %{IP_PORT}( on %{IP_PORT})?( rdomain %{DATA:rdomain})?",
