filter {
  # Grok pour analyser l'entête du message
  grok {
    match => { "event.original" => "^%{TIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:host.hostname}? %{DATA:process.name}(?:\[%{POSINT:process.pid:long}\])?:%{SPACE}%{GREEDYMULTILINE:_temp.message}$" }
    pattern_definitions => {
      "GREEDYMULTILINE" => "(.|\n)*"
      "TIMESTAMP" => "(?:%{TIMESTAMP_ISO8601}|%{SYSLOGTIMESTAMP})"
    }
    tag_on_failure => ["_grokparsefailure_message_header"]
  }

  # Condition pour gérer les messages spécifiques si _temp.message existe
  if [_temp.message] {
    grok {
      match => { "_temp.message" => [
        "^%{DATA:system.auth.ssh.event} %{DATA:system.auth.ssh.method} for (invalid user)?%{DATA:user.name} from %{IPORHOST:source.address} port %{NUMBER:source.port:long} ssh2(: %{GREEDYDATA:system.auth.ssh.signature})?",
        "^%{DATA:system.auth.ssh.event} user %{DATA:user.name} from %{IPORHOST:source.address}",
        "^Did not receive identification string from %{IPORHOST:system.auth.ssh.dropped_ip}",
        "^%{DATA:user.name} :( %{DATA:system.auth.sudo.error} ;)? TTY=%{DATA:system.auth.sudo.tty} ; PWD=%{DATA:system.auth.sudo.pwd} ; USER=%{DATA:system.auth.sudo.user} ; COMMAND=%{GREEDYDATA:system.auth.sudo.command}",
        "^new group: name=%{DATA:group.name}, GID=%{NUMBER:group.id}",
        "^new user: name=%{DATA:user.name}, UID=%{NUMBER:user.id}, GID=%{NUMBER:group.id}, home=%{DATA:system.auth.useradd.home}, shell=%{DATA:system.auth.useradd.shell}"
      ]}
      tag_on_failure => ["_grokparsefailure_specific_auth_messages"]
    }
  }

  # Suppression des champs temporaires et timestamp système
  mutate {
    remove_field => ["_temp", "system.auth.timestamp"]
  }

  # Grok pour les messages PAM pour extraire les informations utilisateur
  grok {
    match => { "message" => [
      "for user %{QUOTE}?%{DATA:_temp.foruser}%{QUOTE}? by %{QUOTE}?%{DATA:_temp.byuser}%{QUOTE}?(?:\(uid=%{NUMBER:_temp.byuid}\))?$",
      "for user %{QUOTE}?%{DATA:_temp.foruser}%{QUOTE}?$",
      "by user %{QUOTE}?%{DATA:_temp.byuser}%{QUOTE}?$",
      "%{BOUNDARY} user %{QUOTE}%{DATA:_temp.user}%{QUOTE}"
    ]}
    pattern_definitions => {
      "QUOTE" => "['\"]",
      "BOUNDARY" => "(?<! )"
    }
    tag_on_failure => ["_grokparsefailure_pam_users"]
    remove_field => ["_temp"]
  }

"^%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} sshd\\[%{POSINT:pid}\\]: Accepted %{WORD:auth_method} for %{USERNAME:user} from %{IP:client_ip} port %{NUMBER:client_port} ssh2$",
        "^%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} sudo: * %{USERNAME:user} : TTY=%{DATA:tty} ; PWD=%{PATH:working_directory} ; USER=%{USERNAME:run_as_user} ; COMMAND=%{GREEDYDATA:command}$",
        "^%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} user(add|del)\\[%{POSINT:pid}\\]: %{GREEDYDATA:message}$",
        "^%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} group(add|del)\\[%{POSINT:pid}\\]: new group: name=%{USERNAME:group_name}, GID=%{NUMBER:gid}$",
        "^%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} systemd\\[%{POSINT:pid}\\]: %{GREEDYDATA:message}$",
        "^%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} sshd\\[%{POSINT:pid}\\]: Failed password for (invalid user )?%{USERNAME:user} from %{IP:client_ip} port %{NUMBER:client_port} ssh2$",
        "^%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} sshd\\[%{POSINT:pid}\\]: Received disconnect from %{IP:client_ip} port %{NUMBER:client_port}:11: %{GREEDYDATA:message}$",
        "^%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} sshd\\[%{POSINT:pid}\\]: Disconnected from %{USERNAME:user} %{IP:client_ip} port %{NUMBER:client_port}$",
        "^%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} sshd\\[%{POSINT:pid}\\]: Connection reset by %{IP:client_ip} port %{NUMBER:client_port} \\[preauth\\]$",
        "^%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} sshd\\[%{POSINT:pid}\\]: Invalid user %{USERNAME:user} from %{IP:client_ip} port %{NUMBER:client_port}$",
        "^%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} sshd\\[%{POSINT:pid}\\]: pam_unix\\(sshd:session\\): session (opened|closed) for user %{USERNAME:user} by \\(uid=%{NUMBER:uid}\\)$"
      ]
}
