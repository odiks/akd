input {
  file {
    path => "/var/log/audit/audit.log"
    type => "audit"
    start_position => "beginning"
  }
}

filter {
  # Parser le type d'événement et le message initial
  grok {
    match => {
      "message" => [
        "^type=%{WORD:audit_type}\s+msg=audit\(%{NUMBER:epoch_time}(?:\.\d+)?(:%{NUMBER:audit_sequence})?\):\s*(?<audit_message>.*)$"
      ]
    }
  }

  # Convertir le temps epoch en @timestamp
  date {
    match => [ "epoch_time", "UNIX" ]
    target => "@timestamp"
    remove_field => [ "epoch_time" ]
  }

  # Parser les paires clé-valeur dans audit_message
  kv {
    source => "audit_message"
    field_split_pattern => "\s+"
    value_split => "="
    include_brackets => false
    trim_value => "\"'"
  }

  # Traiter les valeurs spécifiques en fonction du type d'audit
  if [audit_type] == "SYSCALL" {
    # Convertir certains champs en types appropriés
    mutate {
      convert => {
        "pid" => "integer"
        "ppid" => "integer"
        "uid" => "integer"
        "gid" => "integer"
        "euid" => "integer"
        "egid" => "integer"
        "auid" => "integer"
        "ses" => "integer"
        "exit" => "integer"
        "success" => "string"
      }
      lowercase => [ "success" ]
    }
  } else if [audit_type] == "EXECVE" {
    # Combiner les arguments du processus
    mutate {
      rename => { "argc" => "arg_count" }
    }
  } else if [audit_type] == "CWD" {
    # Aucun traitement spécifique nécessaire
  } else if [audit_type] == "PATH" {
    # Gérer les chemins de fichiers
    mutate {
      rename => { "name" => "file_path" }
    }
  } else if [audit_type] in ["USER_AUTH", "USER_LOGIN"] {
    # Gérer les événements d'authentification utilisateur
    mutate {
      convert => {
        "pid" => "integer"
        "uid" => "integer"
        "auid" => "integer"
        "ses" => "integer"
      }
    }
  } else if [audit_type] in ["USER_START", "USER_END"] {
    # Gérer le début et la fin des sessions utilisateur
    mutate {
      convert => {
        "pid" => "integer"
        "uid" => "integer"
        "auid" => "integer"
        "ses" => "integer"
      }
    }
  } else if [audit_type] in ["CRED_ACQ", "CRED_DISP"] {
    # Gérer l'acquisition et la libération des informations d'identification
    mutate {
      convert => {
        "pid" => "integer"
        "uid" => "integer"
        "auid" => "integer"
        "ses" => "integer"
      }
    }
  } else if [audit_type] == "CONFIG_CHANGE" {
    # Gérer les changements de configuration
    mutate {
      convert => {
        "auid" => "integer"
        "pid" => "integer"
        "ses" => "integer"
        "res" => "string"
      }
      lowercase => [ "res" ]
    }
  } else if [audit_type] in ["DAEMON_START", "DAEMON_END"] {
    # Gérer le démarrage et l'arrêt du démon d'audit
    mutate {
      convert => {
        "pid" => "integer"
        "uid" => "integer"
        "auid" => "integer"
        "ses" => "integer"
      }
    }
  } else if [audit_type] == "AVC" {
    # Gérer les événements SELinux AVC
    mutate {
      rename => {
        "scontext" => "source_context"
        "tcontext" => "target_context"
        "tclass" => "target_class"
      }
    }
  }

  # Nettoyer les champs inutiles
  mutate {
    remove_field => [ "message", "audit_message" ]
  }
}

output {
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "linux-audit-%{+YYYY.MM.dd}"
  }
}