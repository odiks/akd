#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import os
import sys

# --- Configuration ---
GRAYLOG_BASE_URL = os.getenv("GRAYLOG_URL", "http://your-graylog-instance:9000")
API_TOKEN = os.getenv("GRAYLOG_API_TOKEN")

# --- Fonctions API (r√©utilis√©es du script pr√©c√©dent) ---

def _make_api_get_request(endpoint: str) -> dict | None:
    """
    Fonction d'aide pour effectuer une requ√™te GET authentifi√©e √† l'API Graylog.
    """
    if not API_TOKEN:
        print("Erreur: La variable d'environnement GRAYLOG_API_TOKEN n'est pas d√©finie.", file=sys.stderr)
        return None

    api_url = f"{GRAYLOG_BASE_URL}{endpoint}"
    headers = {
        'Accept': 'application/json',
        'X-Requested-By': 'python-script-find-user-id'
    }

    try:
        response = requests.get(api_url, headers=headers, auth=(API_TOKEN, 'token'))
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as err:
        print(f"‚ùå Erreur de connexion ou de requ√™te √† '{api_url}': {err}", file=sys.stderr)
        return None

def create_user_map() -> dict[str, str] | None:
    """
    R√©cup√®re tous les utilisateurs et les transforme en un dictionnaire (mapping)
    de type {username: user_id}.

    Returns:
        dict[str, str] | None: Le dictionnaire de mapping en cas de succ√®s, sinon None.
    """
    print("‚è≥ R√©cup√©ration et cr√©ation du mapping des utilisateurs depuis Graylog...")
    response_data = _make_api_get_request("/api/users")
    
    if not response_data or 'users' not in response_data:
        print("‚ùå Impossible de r√©cup√©rer la liste des utilisateurs.", file=sys.stderr)
        return None

    # On utilise une compr√©hension de dictionnaire pour cr√©er le mapping efficacement
    user_map = {user['username']: user['id'] for user in response_data['users']}
    
    print(f"‚úÖ Mapping cr√©√© avec succ√®s pour {len(user_map)} utilisateurs.")
    return user_map

# --- Nouvelle fonction pour le mode interactif ---

def start_interactive_lookup(user_map: dict[str, str]):
    """
    Lance une session interactive pour rechercher un user_id √† partir d'un username.

    Args:
        user_map (dict[str, str]): Le dictionnaire contenant le mapping username -> user_id.
    """
    print("\n" + "="*40)
    print("   Mode interactif : Recherche d'ID utilisateur")
    print("="*40)
    print("Entrez un nom d'utilisateur pour trouver son ID.")
    print("Tapez 'exit' ou 'quit' pour quitter le programme.")

    while True:
        # Demande √† l'utilisateur de saisir un nom
        # .strip() supprime les espaces inutiles au d√©but et √† la fin
        username_to_find = input("\nEntrez le username √† rechercher > ").strip()

        # Condition de sortie (insensible √† la casse)
        if username_to_find.lower() in ['exit', 'quit']:
            print("üëã Au revoir !")
            break

        if not username_to_find:
            continue

        # Recherche de l'ID dans le dictionnaire.
        # user_map.get(key) est plus s√ªr que user_map[key] car il retourne None si la cl√© n'existe pas,
        # au lieu de lever une erreur.
        user_id = user_map.get(username_to_find)

        if user_id:
            print(f"  ‚úÖ TROUV√â ! L'ID de l'utilisateur '{username_to_find}' est : {user_id}")
        else:
            print(f"  ‚ùå NON TROUV√â. L'utilisateur '{username_to_find}' n'existe pas dans Graylog.")
            # Suggestion bonus : on pourrait chercher des noms proches, mais restons simple pour l'instant.


# --- Point d'entr√©e du script ---
if __name__ == "__main__":
    if "your-graylog-instance" in GRAYLOG_BASE_URL:
        print("Veuillez configurer la variable d'environnement GRAYLOG_URL.", file=sys.stderr)
        sys.exit(1)
    
    if not API_TOKEN:
        print("Veuillez configurer la variable d'environnement GRAYLOG_API_TOKEN.", file=sys.stderr)
        sys.exit(1)

    # 1. Cr√©er le mapping au d√©marrage
    users_mapping = create_user_map()

    # 2. Si le mapping a √©t√© cr√©√©, lancer le mode interactif
    if users_mapping:
        start_interactive_lookup(users_mapping)
    else:
        print("Le programme ne peut pas continuer sans le mapping des utilisateurs.", file=sys.stderr)
        sys.exit(1)
