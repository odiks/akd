## PLAN DE REPRISE D'ACTIVITÉ (PRA) – Stack de Logs Graylog

### 1. INTRODUCTION

Le présent document décrit le Plan de Reprise d’Activité (PRA) pour la plateforme de centralisation des logs construite autour de Graylog et de ses composants techniques associés. Il a pour objectif de garantir la continuité de service et de permettre une remise en fonctionnement rapide et fiable de l’infrastructure en cas de sinistre.

**Public concerné :** équipes Infrastructure, DevOps, Support, Sécurité.

### 2. ARCHITECTURE TECHNIQUE

#### Composants principaux :
- **rsyslog** : collecte des logs systèmes et applications.
- **Kafka** : bus de messages assurant la résilience et le buffering des flux de logs.
- **Logstash** : transformation, filtrage et enrichissement des données avant injection dans Graylog.
- **Graylog** : interface web d’analyse, d’alerte et de gestion des flux de logs.
- **OpenSearch** : moteur d’indexation et de recherche des données.
- **MongoDB** : stockage des métadonnées et configurations de Graylog.

Un schéma d’architecture est disponible en annexe.

### 3. SCÉNARIOS DE SINISTRE COUVERTS

- Perte ou corruption d’un composant (ex : MongoDB ou OpenSearch).
- Perte réseau entre les nœuds.
- Crash complet du serveur Graylog.
- Défaillance de Kafka (perte de messages ou corruption de topics).
- Sinistre majeur : perte complète de l’environnement (infrastructure ou datacenter).

### 4. PLAN DE SAUVEGARDE

#### Données à sauvegarder :
- **rsyslog** : /etc/rsyslog.conf, /etc/rsyslog.d/*
- **Kafka** : export des configurations des topics et offsets (utilisation éventuelle de Kafka MirrorMaker).
- **Logstash** : pipelines et configurations (ex : /etc/logstash/conf.d/*)
- **Graylog** : /etc/graylog/server/server.conf + MongoDB associée
- **MongoDB** : dump régulier (mongodump)
- **OpenSearch** : snapshots des index (via API snapshot)

#### Fréquence :
- **Snapshots OpenSearch** : toutes les 6h
- **Dump MongoDB** : toutes les 24h
- **Backups Kafka config** : hebdomadaire

#### Emplacement :
- Stockage sur NAS dédié + réplicas offsite (Cloud / Site secondaire)

### 5. PROCÉDURES DE RESTAURATION

#### MongoDB :
```bash
mongorestore --drop -d graylog /backups/mongodb/graylog-YYYYMMDD/
```

#### OpenSearch :
```bash
PUT /_snapshot/pra_backup/snapshot-YYYYMMDD/_restore
```

#### Kafka :
- Recréation des topics si nécessaire
- Restauration via MirrorMaker ou scripts internes

#### Graylog :
- Reconnexion à MongoDB et OpenSearch
- Redémarrage du service

#### Logstash :
- Restauration des pipelines
- Redémarrage du service : `systemctl restart logstash`

#### rsyslog :
- Restauration des fichiers de conf
- `systemctl restart rsyslog`

### 6. REPRISE D’ACTIVITÉ – ORDRE DE REDÉMARRAGE

1. MongoDB
2. OpenSearch
3. Kafka
4. Graylog
5. Logstash
6. rsyslog

**Vérifications à chaque étape :**
- Journal système
- Statuts de service (`systemctl status`)
- Accès à l’interface Graylog

### 7. TESTS DE PRA

#### Fréquence :
- Trimestrielle (ou semestrielle selon criticité)

#### Protocole :
- Simulation de sinistre
- Restauration selon le PRA
- Contrôle qualité des données et services

#### Validation :
- Checklist OK/NOK
- Rapport de test archivé dans la GED interne

### 8. RESPONSABILITÉS ET CONTACTS

| Rôle            | Nom/Équipe           | Contact        |
|------------------|----------------------|----------------|
| Responsable PRA  | Équipe Infra         | infra@example.com |
| Support Graylog  | DevOps Logging Team  | logs@example.com  |
| DBA MongoDB      | Équipe BDD           | dba@example.com   |
| Référent Kafka   | Équipe Middleware    | kafka@example.com |

### 9. ANNEXES

#### A. Commandes utiles
```bash
# Vérifier l'état d'un service
systemctl status <service>

# Redémarrer un service
systemctl restart <service>

# Lister les topics Kafka
kafka-topics.sh --list --bootstrap-server localhost:9092

# Sauvegarder MongoDB
mongodump --out /backups/mongodb/$(date +%F)

# Restaurer MongoDB
mongorestore --drop -d graylog /backups/mongodb/<date>

# Lister les snapshots OpenSearch
GET /_snapshot/_all

# Restaurer un snapshot OpenSearch
POST /_snapshot/<repo>/<snapshot>/_restore
```

#### B. Scripts de sauvegarde
```bash
# backup_mongodb.sh
#!/bin/bash
date=$(date +%F)
mongodump --out /backups/mongodb/$date
```
```bash
# snapshot_opensearch.sh
#!/bin/bash
curl -XPUT "http://localhost:9200/_snapshot/pra_backup/snapshot-$(date +%F)"
```

#### C. Exemple de configuration rsyslog
```
module(load="imuxsock")  # pour les messages du système local
module(load="imklog")    # pour les messages du noyau

*.* @kafka-broker:5140;RSYSLOG_SyslogProtocol23Format
```

#### D. Exemple de pipeline Logstash
```ruby
input {
  kafka {
    bootstrap_servers => "kafka:9092"
    topics => ["graylog"]
  }
}

filter {
  grok {
    match => { "message" => "%{COMMONAPACHELOG}" }
  }
}

output {
  gelf {
    host => "graylog"
    port => 12201
  }
}
```

#### E. Diagramme d’architecture technique
[Diagramme à insérer ou disponible en version PDF dans la GED interne sous : /docs/PRA/architecture_graylog.pdf]

#### F. Checklist PRA
- [ ] Dump MongoDB effectué
- [ ] Snapshot OpenSearch pris
- [ ] Configurations sauvegardées (Graylog, rsyslog, Logstash, Kafka)
- [ ] Ordre de redémarrage respecté
- [ ] Accès à l’interface Graylog validé
- [ ] Alerting fonctionnel
- [ ] Vérification des logs récents
- [ ] Rapport de PRA rempli et archivé




—————————————



Plan de Reprise d’Activité (PRA) – Solution de Centralisation des Logs

1. Objectifs du PRA
L’objectif principal de ce Plan de Reprise d’Activité est de garantir une reprise rapide et efficace du système de centralisation des logs en cas de sinistre majeur, afin de limiter l’interruption de service, préserver l'intégrité des logs, et assurer la continuité des opérations de supervision, de sécurité, et d’analyse.
Les sous-objectifs sont :
* Minimiser le temps de reprise (RTO) et la perte de données admissible (RPO).
* Définir des procédures de sauvegarde, restauration et basculement.
* Clarifier les responsabilités des intervenants.

2. Architecture Technique
La solution se base sur l’architecture suivante :
css
CopyEdit
[ Serveurs Applicatifs / Réseaux ]
                │
          [ rsyslog (client) ]
                │
          [ rsyslog (serveur) ]
                │
            [ Kafka Cluster ]
                │
            [ Logstash ]
                │
          [ Graylog ] ─────→ [ MongoDB ]
                │
          [ OpenSearch ]
* rsyslog : Collecte locale des logs et les envoie au serveur rsyslog central.
* Kafka : Buffering, gestion de flux asynchrone.
* Logstash : Transformation, enrichissement des logs.
* Graylog : Interface utilisateur, gestion, pipelines.
* OpenSearch : Stockage et indexation des logs.
* MongoDB : Métadonnées et configurations Graylog.

3. Scénarios de Sinistre Couverts
Scénario	Impact Potentiel	Priorité	Objectif PRA
Crash d’un composant (ex : Logstash)	Interruption partielle de traitement des logs	Moyenne	Relancer le service, monitorer les files Kafka
Panne réseau	Perte de connectivité entre les composants	Élevée	Basculement réseau, rétentions Kafka
Perte complète d’un serveur	Interruption complète du service ou composant	Critique	Restauration sur serveur secondaire
Corruption ou perte de données	Perte d'historique, erreur de recherche/analyse	Critique	Restauration depuis les sauvegardes
Perte totale de l’infrastructure	Système indisponible	Critique	Reprise sur site de secours ou cloud
4. Plan de Sauvegarde
Élément à Sauvegarder	Fréquence	Méthode	Localisation
MongoDB	Quotidienne	mongodump + snapshot LVM	Stockage distant sécurisé
OpenSearch	Quotidienne	Snapshot via API vers S3 ou NFS	Bucket S3 ou NFS hors site
Configurations Graylog	Hebdomadaire	Export JSON via API Graylog	Git/Stockage partagé
Fichiers Kafka (topics)	Non applicable	Réplication interne + retention	N/A (Kafka gère la persistance)
Fichiers de configuration (rsyslog, Logstash, Kafka, Graylog)	À chaque modification	Ansible/Git	Dépôt Git sécurisé
Logs systèmes / scripts PRA	Hebdomadaire	Rsync vers serveur de sauvegarde	Serveur PRA
5. Procédures de Restauration
5.1. rsyslog
* Re-déployer la configuration depuis Git.
* Redémarrer le service : systemctl restart rsyslog.
5.2. Kafka
* Vérifier les brokers avec kafka-topics.sh et kafka-consumer-groups.sh.
* Si crash : restaurer broker perdu via Ansible (réinstaller, rattacher au cluster).
* En cas de perte totale : réinstancier cluster et restaurer partitions (si possible).
5.3. Logstash
* Re-déployer pipeline depuis Git.
* Vérifier les entrées et sorties.
* Redémarrer : systemctl restart logstash.
5.4. Graylog
* Restaurer MongoDB via mongorestore.
* Restaurer configurations (pipelines, alertes) via API ou fichiers exportés.
* Vérifier connectivité avec OpenSearch.
* Redémarrer : systemctl restart graylog-server.
5.5. OpenSearch
* Recréer cluster si nécessaire.
* Restaurer snapshots via API _snapshot.
* Vérifier l’état des index (_cat/indices).
* Redémarrer cluster.
5.6. MongoDB
* Utiliser mongorestore depuis dump le plus récent.
* Vérifier intégrité avec db.collection.stats().

6. Dépendances Critiques et Points de Vigilance
Composant	Dépendances critiques	Vigilance spécifique
Kafka	Réplication, disques persistants	Perte de brokers = perte temporaire de logs
Logstash	Kafka, Graylog	Pipeline mal configuré = perte de logs
Graylog	MongoDB, OpenSearch	Compatibilité versions Mongo/OS
OpenSearch	Disques SSD, snapshots	Fragmentation, index non restaurables
MongoDB	Intégrité des dumps	Pas de hot-backup sans outil externe
Réseau	Latence, connectivité inter-composants	Redondance DNS/VPN à vérifier
7. Tests de PRA
Élément testé	Fréquence	Méthodologie	Critère de réussite
Sauvegarde/restauration MongoDB	Mensuelle	Dump + suppression + restore test	Données disponibles
Restauration Graylog config	Trimestrielle	Suppression / re-import JSON	Interface fonctionnelle
Basculement serveur Logstash	Semestrielle	Mise en arrêt forcée + redéploiement	Traitement des logs rétabli
Simulation perte Kafka	Annuelle	Mise en arrêt d’un broker + montée d’un nouveau	Cluster disponible, messages conservés
Test complet (Full PRA)	Annuelle	Simulation sinistre complet + restauration full stack	Logs visibles dans Graylog
8. Contacts et Responsabilités
Équipe	Responsable	Contact	Rôle
Ops / Infra	Maxime L., Responsable Systèmes	ops@exemple.fr	Sauvegardes, serveurs, réseau, PRA
Dev / Observabilité	Sarah T., Lead DevOps	devops@exemple.fr	Configurations, automatisation, monitoring
Support N1/N2	Équipe Support IT	support@exemple.fr	Ticketing, diagnostics de premier niveau
Sécurité	Damien R., RSSI	securite@exemple.fr	Conformité, gestion des accès
