filter {
  if [program] == "postfix" {
    grok {
      match => {
        "message" => "^%{SYSLOGTIMESTAMP:timestamp}\s*%{SYSLOGHOST:host} %{WORD:process_name}\[%{POSINT:process_pid}\]: %{GREEDYDATA:remaining_postfix_msg}"
      }
    }

    # Extraction conditionnelle pour les logs 'from' et 'to'
    grok {
      match => {
        "remaining_postfix_msg" => [
          # Logs 'from'
          "(?<queue_id>[A-Z0-9]+): from=<%{EMAILADDRESS:from}>, size=%{NUMBER:size}, nrcpt=%{NUMBER:nrcpt} %{GREEDYDATA:extra_info}",

          # Logs 'to'
          "(?<queue_id>[A-Z0-9]+): to=<%{EMAILADDRESS:to}>, relay=%{NOTSPACE:relay}, delay=%{NUMBER:delay}, delays=%{GREEDYDATA:delays}, dsn=%{NOTSPACE:dsn}, status=%{NOTSPACE:status} %{GREEDYDATA:extra_info}"
        ]
      }
    }

    # Suppression des logs sans queue_id (non pertinents)
    if ![queue_id] {
      drop { }
    }

    # Capture générique des autres logs postfix
    if !([from] or [to]) {
      grok {
        match => { "remaining_postfix_msg" => "%{GREEDYDATA:generic_postfix_message}" }
      }
    }

    # Découpage des délais si présents
    if [delays] {
      dissect {
        mapping => {
          "delays" => "%{delay_before_queue}/%{delay_in_queue}/%{delay_connection}/%{delay_transmission}"
        }
      }
    }

    # Formatage de la date
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      target => "@timestamp"
    }

    # Utilisation de aggregate pour regrouper par queue_id
    aggregate {
      task_id => "%{queue_id}"
      code => "
        map['queue_id'] ||= event.get('queue_id')
        map['from'] ||= event.get('from')
        map['size'] ||= event.get('size')
        map['nrcpt'] ||= event.get('nrcpt')
        map['recipients'] ||= []
        if event.get('to')
          map['recipients'] << {
            'to' => event.get('to'),
            'relay' => event.get('relay'),
            'delay' => event.get('delay'),
            'delays' => {
              'delay_before_queue' => event.get('delay_before_queue'),
              'delay_in_queue' => event.get('delay_in_queue'),
              'delay_connection' => event.get('delay_connection'),
              'delay_transmission' => event.get('delay_transmission')
            },
            'dsn' => event.get('dsn'),
            'status' => event.get('status')
          }
        end
      "
      push_map_as_event_on_timeout => true
      timeout => 120
      timeout_tags => ['_aggregated']
    }

    # Suppression des champs temporaires
    mutate {
      remove_field => ["message", "remaining_postfix_msg", "generic_postfix_message", "delays"]
    }
  }
}


^%{SYSLOGTIMESTAMP:timestamp}\s*%{SYSLOGHOST:host} %{PROG:process_name}\[%{POSINT:process_pid}]: %{GREEDYDATA:remaining_postfix_msg}

^%{NOTSPACE:queue_id}: to=<%{EMAILADDRESS:to}>, relay=%{NOTSPACE:relay}, delay=%{NUMBER:delay}, delays=%{GREEDYDATA:delays}, dsn=%{NOTSPACE:dsn}, status=%{NOTSPACE:status} %{GREEDYDATA:postfix_message}|^%{NOTSPACE:queue_id}: from=<%{EMAILADDRESS:from}>, size=%{NUMBER:size}, nrcpt=%{NUMBER:nrcpt} %{GREEDYDATA:postfix_message}|^%{NOTSPACE:queue_id}: %{GREEDYDATA:postfix_message}
