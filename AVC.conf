filter {
  if [service] == "HTTP" and [method] == "POST" {
    aggregate {
      task_id => "%{sessionid}"
      code => "
        previous_sentbyte = map['last_sentbyte'] || 0
        current_sentbyte = event.get('sentbyte').to_i
        event.set('real_sentbyte', current_sentbyte - previous_sentbyte)
        map['last_sentbyte'] = current_sentbyte
      "
      map_action => "create_or_update"
      timeout => 30  # Supprime la session après 30s d'inactivité
    }
  }

rule "Set OpenSearch ID from Kafka event_id"
when
    has_field("event_id")
then
    set_field("_id", to_string($message.event_id));
end
}

avc:\s+%{WORD:avc_action}\s+\{\s*%{WORD:avc_permission}\s*\}\s+for\s+pid=%{NUMBER:pid}\s+comm="%{DATA:comm}"(?:\s+name="%{DATA:name}")?\s+dev="%{DATA:dev}"\s+ino=%{NUMBER:ino}\s+scontext=%{DATA:scontext}\s+tcontext=%{DATA:tcontext}\s+tclass=%{DATA:tclass}

avc:\s+%{WORD:avc_action}\s+\{\s*%{WORD:avc_permission}\s*\}\s+for\s+pid=%{NUMBER:avc_pid}\s+comm="%{DATA:comm}"(?:\s+path="(?<path>[^"]+)")?\s+dev="%{DATA:dev}"\s+ino=%{NUMBER:ino}\s+scontext=%{DATA:scontext}\s+tcontext=%{DATA:tcontext}\s+tclass=%{DATA:tclass}